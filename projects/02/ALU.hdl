// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    DMux4Way16(in=x, sel[1]=zx, sel[0]=nx, a=X, b=willNotX, c=willZeroX, d=willZeroNotX);
    DMux4Way16(in=y, sel[1]=zy, sel[0]=ny, a=Y, b=willNotY, c=willZeroY, d=willZeroNotY);

    Not16(in=willNotX, out=notX);
    And16(a=false, b=willZeroX, out=zeroX);
    And16(a=false, b=willZeroNotX, out=notYetX);
    Not16(in=notYetX, out=zeroNotX);

    Not16(in=willNotY, out=notY);
    And16(a=false, b=willZeroY, out=zeroY);
    And16(a=false, b=willZeroNotY, out=notYetY);
    Not16(in=notYetY, out=zeroNotY);

    Mux4Way16(a=X, b=notX, c=zeroX, d=zeroNotX, sel[1]=zx, sel[0]=nx, out=x1);
    Mux4Way16(a=Y, b=notY, c=zeroY, d=zeroNotY, sel[1]=zy, sel[0]=ny, out=y1);

    DMux4Way16(in=x1, sel[1]=f, sel[0]=no, a=willAndX, b=willAndNotX, c=willAddX, d=willAddNotX);
    DMux4Way16(in=y1, sel[1]=f, sel[0]=no, a=willAndY, b=willAndNotY, c=willAddY, d=willAddNotY);

    And16(a=willAndX, b=willAndY, out=andXY);
    And16(a=willAndNotX, b=willAndNotY, out=notYetAndNotXY);
    Not16(in=notYetAndNotXY, out=andNotXY);
    Add16(a=willAddX, b=willAddY, out=addXY);
    Add16(a=willAddNotX, b=willAddNotY, out=notYetAddNotXY);
    Not16(in=notYetAddNotXY, out=addNotXY);

    Mux4Way16(a=andXY, b=andNotXY, c=addXY, d=addNotXY, sel[1]=f, sel[0]=no, out=tmpout);

    // set out
    And16(a=tmpout, b=true, out=out);

    // set zr
    Or16Way(in=tmpout, out=digitsOr);
    Xor(a=true, b=digitsOr, out=zr);

    // set ng
    And16(a=tmpout, b[15]=true, b[0..14]=false, out=MSBs);
    Or16Way(in=MSBs, out=MSB);
    Xor(a=MSB, b=false, out=ng);
}